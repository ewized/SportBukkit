From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 17 Jan 2017 07:10:14 -0500
Subject: [PATCH] SportBukkit


diff --git a/README.md b/README.md
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-CraftBukkit
+SportBukkit
 ======
 An implementation of the [Bukkit](https://hub.spigotmc.org/stash/projects/SPIGOT/repos/bukkit) plugin API for [Minecraft](https://minecraft.net/) servers, currently maintained by [SpigotMC](http://www.spigotmc.org/).
 
diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -175,6 +175,11 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
             try {
                 this.an().a(inetaddress, this.P());
+                // SportBukkit start
+                if(this.getServerConnection().localAddress().getPort() != this.getConfiguredPort()) {
+                    DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().localAddress().getPort());
+                }
+                // SportBukkit end
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
                 DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
@@ -454,7 +459,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
     }
 
     public int e_() {
-        return this.P();
+        return getServerConnection().localAddress().getPort(); // SportBukkit - return dynamic port, if set, otherwise configured port
     }
 
     public String f_() {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1187,6 +1187,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         return this.I;
     }
 
+    public int getConfiguredPort() { return this.P(); } // SportBukkit - alias for following method
     public int P() {
         return this.u;
     }
@@ -1417,6 +1418,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
 
     }
 
+    public ServerConnection getServerConnection() { return this.an(); } // SportBukkit - alias for following method
     public ServerConnection an() {
         return this.p;
     }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -64,6 +64,20 @@ public class ServerConnection {
     private final List<NetworkManager> h = Collections.synchronizedList(Lists.<NetworkManager>newArrayList());
     // SportBukkit end
 
+    // SportBukkit start
+    private java.net.InetSocketAddress localAddress;
+    public java.net.InetSocketAddress localAddress() {
+        if(localAddress != null) {
+            // If connected, return bound address (with potentially dynamic port)
+            return localAddress;
+        } else {
+            // If not connected yet, return configured address and port (which may be 0)
+            return java.net.InetSocketAddress.createUnresolved(this.f.getServerIp(),
+                                                               this.f.getConfiguredPort());
+        }
+    }
+    // SportBukkit end
+
     public ServerConnection(MinecraftServer minecraftserver) {
         this.f = minecraftserver;
         this.d = true;
@@ -103,6 +117,8 @@ public class ServerConnection {
                     f.server.eventBus().callEvent(new org.bukkit.craftbukkit.event.AsyncClientConnectEvent(channel, networkmanager)); // SportBukkit
                 }
             }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+
+            this.localAddress = (java.net.InetSocketAddress) this.g.get(0).channel().localAddress(); // SportBukkit
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/WorldNBTStorage.java b/src/main/java/net/minecraft/server/WorldNBTStorage.java
--- a/src/main/java/net/minecraft/server/WorldNBTStorage.java
+++ b/src/main/java/net/minecraft/server/WorldNBTStorage.java
@@ -191,6 +191,14 @@ public class WorldNBTStorage implements IDataManager, IPlayerFileData {
     }
 
     // CraftBukkit start
+    public File getPlayerFile(UUID id) {
+        return new File(this.playerDir, id + ".dat");
+    }
+
+    public boolean hasPlayerData(UUID id) {
+        return getPlayerFile(id).isFile();
+    }
+
     public NBTTagCompound getPlayerData(String s) {
         try {
             File file1 = new File(this.playerDir, s + ".dat");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -2,9 +2,11 @@ package org.bukkit.craftbukkit;
 
 import com.mojang.authlib.GameProfile;
 import java.io.File;
+import java.time.Instant;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.UUID;
 
 import net.minecraft.server.EntityPlayer;
@@ -27,12 +29,19 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     private final GameProfile profile;
     private final CraftServer server;
     private final WorldNBTStorage storage;
+    private final Optional<Instant> updatedAt;
 
     protected CraftOfflinePlayer(CraftServer server, GameProfile profile) {
         this.server = server;
         this.profile = profile;
         this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
+        this.updatedAt = profile.getName() != null ? Optional.of(Instant.now())
+                                                   : Optional.empty();
+    }
 
+    @Override
+    public Optional<Instant> getUpdatedAt() {
+        return updatedAt;
     }
 
     public GameProfile getProfile() {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -6,6 +6,9 @@ import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.net.InetSocketAddress;
+import java.nio.file.Path;
+import java.nio.file.Paths;
 import java.time.Duration;
 import java.time.Instant;
 import java.util.ArrayList;
@@ -17,6 +20,7 @@ import java.util.LinkedHashMap;
 import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.logging.Level;
@@ -24,6 +28,8 @@ import java.util.logging.Logger;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import javax.inject.Inject;
+import javax.inject.Provider;
 
 import com.google.common.collect.Maps;
 import com.google.inject.Guice;
@@ -145,6 +151,7 @@ import org.bukkit.event.server.TabCompleteEvent;
 import net.md_5.bungee.api.chat.BaseComponent;
 import tc.oc.minecraft.api.configuration.InvalidConfigurationException;
 import tc.oc.minecraft.api.plugin.PluginFinder;
+import tc.oc.minecraft.api.user.OfflinePlayerFinder;
 
 public final class CraftServer extends CraftBukkitRuntime implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
@@ -194,6 +201,9 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     public int reloadCount;
     public boolean bungee = false;
     public static final com.google.gson.Gson gson = new com.google.gson.Gson();
+    private final Path root;
+
+    @Inject Provider<OfflinePlayerFinder> userFinderProvider;
 
     private @Nullable Instant emptySince;
 
@@ -208,6 +218,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
         this.console = console;
+        this.root = Paths.get(".").toAbsolutePath();
         this.eventBus = new SimpleEventBus(this.console.primaryThread, pluginManager);
         this.playerList = (DedicatedPlayerList) playerList;
         this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, EntityPlayer::getBukkitEntity));
@@ -329,7 +340,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
             logger.info("Creating injector in stage " + stage);
 
             try {
-                injector = Guice.createInjector(stage, new ServerInstanceModule(this, Arrays.asList(plugins)));
+                injector = Guice.createInjector(
+                    stage,
+                    new CraftServerModule(),
+                    new ServerInstanceModule(this, Arrays.asList(plugins))
+                );
             } catch(RuntimeException ex) {
                 logger.log(Level.SEVERE, "Injector creation failed, server will shut down", ex);
                 throw ex;
@@ -551,7 +566,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     // so if that changes this will need to as well
     @Override
     public int getPort() {
-        return this.getConfigInt("server-port", 25565);
+        return getAddress().getPort();
     }
 
     @Override
@@ -561,7 +576,12 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public String getIp() {
-        return this.getConfigString("server-ip", "");
+        return getAddress().getHostString();
+    }
+
+    @Override
+    public InetSocketAddress getAddress() {
+        return getHandle().getServer().getServerConnection().localAddress();
     }
 
     @Override
@@ -637,6 +657,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     // End Temporary calls
 
     @Override
+    public Path getRootPath() {
+        return root;
+    }
+
+    @Override
     public String getUpdateFolder() {
         return this.configuration.getString("settings.update-folder", "update");
     }
@@ -1422,6 +1447,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public boolean isStopping() {
+        return !console.isRunning();
+    }
+
+    @Override
     public int broadcast(String message, String permission) {
         int count = 0;
         Set<Permissible> permissibles = getPluginManager().getPermissionSubscriptions(permission);
@@ -1614,21 +1644,29 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
-    public OfflinePlayer[] getOfflinePlayers() {
-        WorldNBTStorage storage = (WorldNBTStorage) console.worlds.get(0).getDataManager();
-        String[] files = storage.getPlayerDir().list(new DatFileFilter());
-        Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
-
-        for (String file : files) {
+    public Set<OfflinePlayer> getSavedPlayers() {
+        final Set<OfflinePlayer> players = new HashSet<>();
+        for (String file : ((WorldNBTStorage) console.worlds.get(0).getDataManager()).getPlayerDir().list(new DatFileFilter())) {
             try {
                 players.add(getOfflinePlayer(UUID.fromString(file.substring(0, file.length() - 4))));
             } catch (IllegalArgumentException ex) {
                 // Who knows what is in this directory, just ignore invalid files
             }
         }
-
         players.addAll(getOnlinePlayers());
+        return players;
+    }
 
+    @Override
+    public Optional<OfflinePlayer> tryOfflinePlayer(UUID id) {
+        final WorldNBTStorage storage = (WorldNBTStorage) console.worlds.get(0).getDataManager();
+        return storage.hasPlayerData(id) ? Optional.of(getOfflinePlayer(id))
+                                         : Optional.empty();
+    }
+
+    @Override
+    public OfflinePlayer[] getOfflinePlayers() {
+        final Set<OfflinePlayer> players = getSavedPlayers();
         return players.toArray(new OfflinePlayer[players.size()]);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java b/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java
new file mode 100644
index 0000000..94493fb
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServerModule.java
@@ -0,0 +1,36 @@
+package org.bukkit.craftbukkit;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Provides;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import net.minecraft.server.MinecraftServer;
+import org.bukkit.Server;
+import org.bukkit.ServerModule;
+import tc.oc.minecraft.api.user.UserSourceBinder;
+
+public class CraftServerModule extends AbstractModule {
+
+    @Override
+    protected void configure() {
+        install(new ServerModule());
+
+        final UserSourceBinder sources = new UserSourceBinder(binder());
+        sources.addBinding().to(MojangUserSource.class);
+        sources.addBinding().to(EmptyUserSource.class);
+    }
+
+    @Provides
+    CraftServer craftServer(Server server) {
+        return (CraftServer) server;
+    }
+
+    @Provides
+    MinecraftServer minecraftServer(CraftServer craftServer) {
+        return craftServer.getServer();
+    }
+
+    @Provides
+    MinecraftSessionService minecraftSessionService(MinecraftServer minecraftServer) {
+        return minecraftServer.az();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/EmptyUserSource.java b/src/main/java/org/bukkit/craftbukkit/EmptyUserSource.java
new file mode 100644
index 0000000..0843923
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/EmptyUserSource.java
@@ -0,0 +1,24 @@
+package org.bukkit.craftbukkit;
+
+import java.util.UUID;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+import javax.inject.Inject;
+
+import com.mojang.authlib.GameProfile;
+import tc.oc.minecraft.api.user.OfflinePlayer;
+import tc.oc.minecraft.api.user.UserSource;
+
+public class EmptyUserSource implements UserSource {
+
+    private final CraftServer server;
+
+    @Inject EmptyUserSource(CraftServer server) {
+        this.server = server;
+    }
+
+    @Override
+    public OfflinePlayer findUser(UUID id, Predicate<OfflinePlayer> filter, Supplier<OfflinePlayer> next) {
+        return new CraftOfflinePlayer(server, new GameProfile(id, null));
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/MojangUserSource.java b/src/main/java/org/bukkit/craftbukkit/MojangUserSource.java
new file mode 100644
index 0000000..6caf2ba
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/MojangUserSource.java
@@ -0,0 +1,28 @@
+package org.bukkit.craftbukkit;
+
+import java.util.UUID;
+import java.util.function.Predicate;
+import java.util.function.Supplier;
+import javax.inject.Inject;
+
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import org.bukkit.Server;
+import tc.oc.minecraft.api.user.OfflinePlayer;
+import tc.oc.minecraft.api.user.UserSource;
+
+public class MojangUserSource implements UserSource {
+
+    private final Server server;
+    private final MinecraftSessionService sessionService;
+
+    @Inject MojangUserSource(Server server, MinecraftSessionService sessionService) {
+        this.server = server;
+        this.sessionService = sessionService;
+    }
+
+    @Override
+    public OfflinePlayer findUser(UUID id, Predicate<OfflinePlayer> filter, Supplier<OfflinePlayer> next) {
+        return new CraftOfflinePlayer((CraftServer) server, sessionService.fillProfileProperties(new GameProfile(id, null), true));
+    }
+}
